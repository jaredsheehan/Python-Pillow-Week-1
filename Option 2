import PIL
from PIL import Image
from PIL import ImageEnhance
from PIL import ImageDraw
from PIL import ImageFont

# read image and convert to RGB
image=Image.open("readonly/msi_recruitment.gif")
image=image.convert('RGB')

fontFile = "readonly/fanwood-webfont.ttf"
# get a font
fontT = ImageFont.truetype(fontFile, 40)

# Start a loop to build a list of 9 images to have different brightnesses and append to the contact sheet
# with the text drawn on the bottom with intensity appended according to the varied color of the image
images=[]
new_text = ""
for i in range(1, 10):
    (mod_red, mod_green, mod_blue) = (1,1,1)
    mod = 1
    if i in (1,4,7):
        mod = 0.1
    elif i in (2,5,8):
        mod = 0.5
    else:
        mod = 0.9
        
    if i <= 3:
        mod_red = mod
        channel = 0
    elif i <= 6:
        mod_blue = mod
        channel = 1
    else:
        mod_green = mod
        channel = 2
        
    # make a blank image for the text, initialized to transparent text color
    new_image = Image.new('RGBA', (image.width,image.height+40), (200, 100, 50))

    # get a drawing context
    d = ImageDraw.Draw(new_image)

    for x in range(image.width):
        for y in range(image.height):
            old_color = image.getpixel((x,y))
            red, blue, green = old_color
        
            d.point((x,y), fill=(int(red*mod_red), int(blue*mod_blue),int(green*mod_green)))
    d.rectangle([(0,image.height), (image.width,image.height+40)], fill=(0,0,0), outline=None, width=0)
    # draw text, half opacity
    new_text = "channel " + str(channel) + " intensive " + str(mod)
    d.text((0,image.height+5), new_text, font=fontT, fill=(int(255*mod_red),int(255*mod_blue),int(255*mod_green)))
    
    images.append(new_image)
    
# create a contact sheet from different brightnesses
first_image=images[0]
contact_sheet=PIL.Image.new(first_image.mode, (first_image.width*3,first_image.height*3))
x=0
y=0

for img in images:
    # Lets paste the current image into the contact sheet
    contact_sheet.paste(img, (x, y) )
    # Now we update our X position. If it is going to be the width of the image, then we set it to 0
    # and update Y as well to point to the next "line" of the contact sheet.
    if x+first_image.width == contact_sheet.width:
        x=0
        y=y+first_image.height
    else:
        x=x+first_image.width

# resize and display the contact sheet
contact_sheet = contact_sheet.resize((int(contact_sheet.width/2),int(contact_sheet.height/2) ))
display(contact_sheet)
